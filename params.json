{"name":"android-open","tagline":"Android 开发最佳实践","body":"# Android 开发最佳实践\r\n\r\n[参考 Futurice Android-Best-Practices ](https://github.com/futurice/android-best-practices/blob/master/translations/Chinese/README.cn.md)\r\n\r\n### 开发工具\r\n\r\n使用 Android Studio + gradle\r\n\r\n### 工程结构\r\n\r\n```\r\nnew-structure\r\n├─ library-foobar\r\n├─ app\r\n│  ├─ libs\r\n│  ├─ src\r\n│  │  ├─ androidTest\r\n│  │  │  └─ java\r\n│  │  │     └─ com/futurice/project\r\n│  │  └─ main\r\n│  │     ├─ java\r\n│  │     │  └─ com/futurice/project\r\n│  │     ├─ res\r\n│  │     └─ AndroidManifest.xml\r\n│  ├─ build.gradle\r\n│  └─ proguard-rules.pro\r\n├─ build.gradle\r\n└─ settings.gradle\r\n```\r\n\r\n结构明确的分开了'source sets' ( `main`, `androidTest` )\r\n\r\n例如，添加源组 ‘paid’ 和 ‘free’ 在 src 中，这将成为您的应用程序的付费和免费的两种模式的源代码。\r\n\r\n你的项目引用第三方项目库时（例如，library-foobar ），拥有一个顶级包名 `app` 从第三方库项目区分你的应用程序是非常有用的. 然后 `settings.gradle` 不断引用这些库项目，其中 `app/build.gradle` 可以引用。\r\n\r\n### Java 包结构\r\n\r\n与后端交互负责网络处理类，放在 `network` 包下面。\r\n\r\n一些控制器角色的类是应用程序级别的，同时是接近系统的。 这些类放在 `managers` 包下面。\r\n\r\n一些繁杂的数据处理类，比如说 \"DateUtils\", 放在 `utils` 包下面。\r\n\r\n一些自定义的视图放在 `widgets` 包下面。\r\n\r\n适配器 Adapter 是在数据和视图之间。然而他们通常需要通过 `getView()` 方法来导出一些视图， 所以你可以将 `adapters` 包放在 `views` 包里面。\r\n\r\n总而言之，以最接近用户而不是最接近后端去安排他们。\r\n\r\n```\r\ncom.futurice.project\r\n├─ network\r\n├─ models\r\n├─ managers\r\n├─ utils\r\n├─ fragments\r\n└─ views\r\n   ├─ adapters\r\n   ├─ actionbar\r\n   ├─ widgets\r\n   └─ notifications\r\n```\r\n\r\n### Gradle 配置\r\n\r\n**使用 Maven ** 依赖方案代替使用导入 jar 包方案, 如果在你的项目中明确使用 jar 文件，那么它们可能成为永久的版本，如 `2.1.1` 。下载 jar 包更新它们是很繁琐的， 这个问题 Maven 很好的解决了，这在 Android Gradle 构建中也是推荐的方法。你可以指定版本的一个范围，如 `2.1.+` , 然后 Maven 会自动升级到制定的最新版本. 例如：\r\n\r\n```\r\ndependencies {\r\n    compile 'com.netflix.rxjava:rxjava-core:0.19.+'\r\n    compile 'com.netflix.rxjava:rxjava-android:0.19.+'\r\n    compile 'com.fasterxml.jackson.core:jackson-databind:2.4.+'\r\n    compile 'com.fasterxml.jackson.core:jackson-core:2.4.+'\r\n    compile 'com.fasterxml.jackson.core:jackson-annotations:2.4.+'\r\n    compile 'com.squareup.okhttp:okhttp:2.0.+'\r\n    compile 'com.squareup.okhttp:okhttp-urlconnection:2.0.+'\r\n}\r\n```\r\n\r\n### 调试\r\n\r\n#### Log 打印\r\n\r\n每个 Activity, Fragment, Adapter 之类的文件中需要打印最好以各自文件名为 Log 标识。\r\n\r\n如:\r\n\r\n```\r\nTAG 定义\r\n\r\nprivate final static String TAG = ExampleClass.class.getSimpleName();\r\n\r\nLog.d(TAG, logMessage);\r\n\r\n```\r\n\r\n### 命名\r\n\r\n##### 1. 变量名\r\n\r\n以m开头的驼峰命名规则。如：mExample\r\n\r\n尽量不要用_下划线命名。\r\n\r\n##### 2. Layout的id创建命名规则\r\n\r\n采用下划线命名方式。如：edit_example\r\n\r\n##### 3. 常量\r\n\r\n以大写命名。如：EXAMPLE\r\n\r\n##### 4. 文字提示\r\n\r\n所有文字提示，都应该使用strings.xml配置文件。\r\n\r\n##### 5. 参数名\r\n\r\n驼峰命名规则。如：example\r\n\r\n##### 6. 所有使用的常量必须使用Key Word 代替\r\n\r\n如规则3，例子 private static final int EXAMPLE = 1;\r\n\r\n##### 7. 方法名\r\n\r\n驼峰命名规则。如：exampleTest\r\n\r\n##### 8. Layout 文件命名\r\n\r\n采用下划线命名方式。如：activity_example.xml\r\n\r\n对应不同的功能替换前面部分名称，如：Activity、Fragment、Item、etc.\r\n\r\n### 资源文件 Resources\r\n\r\n**命名** 遵循前缀表明类型的习惯，形如 `type_foo_bar.xml`。\r\n\r\n例如：`fragment_contact_details.xml`, `view_primary_button.xml`, `activity_main.xml`.\r\n\r\n**ID** 同样前缀表明类型的习惯，如 '@+id/tx_foo_bar'\r\n\r\n#### 颜色\r\n\r\n统一由设计给出颜色定义。开发者不允许定义颜色。\r\n\r\n#### 图片\r\n\r\n统一由设计给出图片命名。\r\n\r\n### 注释\r\n\r\n1. Model 中的字段需要有注释\r\n\r\n2. 对于较复杂的逻辑或重要代码块，尽量加上注释\r\n\r\n##### 注释方式\r\n\r\n例如：\r\n\r\n```\r\n  /**\r\n   * Initializes this store with the given context.\r\n   */\r\n  private void initWithContext(Context context, String sharedPrefsName) {\r\n    // Time ourselves\r\n    long start = SystemClock.uptimeMillis();\r\n  }\r\n```","google":"UA-24833524-3","note":"Don't delete this file! It's used internally to help with page regeneration."}